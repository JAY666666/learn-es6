{"version":3,"sources":["function.js"],"names":["func1","x","y","console","log","func2","undefined","func4","func5","func6","sum","arrs","val","func7","a","b","rest","length","f","name","d","sum1","sum2","add","sum3","map","full","first","last","numbers","nums","func8","func9","func10"],"mappings":"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","file":"function.bdbf412b.js","sourceRoot":"../function","sourcesContent":["//1 函数参数的扩展\nfunction func1(x, y) {\n    y = y || 'world';\n    console.log(x, y)\n} //传统的函数参数默认值\nfunc1('hello'); //hello world\nfunc1('hello', 'hangzhou'); //hello world\nfunc1('hello', ''); //hello world 传统的参数默认值方法 弊端:当赋值为''时,任然使用了默认值 事实上只有当y===undefined时,会触发使用默认值 \n\n\nfunction func2(x, y = 'world') {\n    console.log(x, y)\n} //es6改进后的函数参数\nfunc2('hello'); //hello world \nfunc2('hello', 'hangzhou'); //hello hangzhou\nfunc2('hello', ''); //hello 此值应为比较合理的\nfunc2('hello', undefined); //hello world undefined触发参数默认值\nfunc2('', undefined); //world\nfunc2('hello', null); //hello null\n\n// function func3(x, x, y=3) {\n//     console.log(x, x, y)\n// }\n// func3(1, 2, 3); 报错 当使用函数参数默认值时,不允许出现参数重复的情况\n\n\n//2 与解构赋值默认值结合使用\nfunction func4({\n    x,\n    y = 2\n}) {\n    console.log(x, y)\n}\nfunc4({}); //undefined 2\nfunc4({\n    x: 1,\n    y: 2\n}); //1 2\nfunc4({\n    x: 1\n}); //1 2\n// func4(); TypeError: cannot read property 'x' of undefined 函数func4的参数是个对象,只有当参数为对象时,才能进行解构赋值,否则会报错\n\nfunction func5({\n    x,\n    y = 2\n} = {}) {\n    console.log(x, y)\n}\nfunc5(); //undefined 2 函数参数对象默认值为空对象\n\n//3 rest参数 rest是个数组\nfunction func6(...arrs) {\n    let sum = 0;\n    for (var val of arrs) {\n        sum += val;\n    }\n    console.log(sum)\n}\nfunc6(1, 2, 3); //6\n\nfunction func7(a, b, ...rest) {\n    console.log(rest)\n}\nfunc7(1, 2, 3, 4, 5); //[3,4,5] rest参数只能放在最后\n\nconsole.log((function (a, ...b) {}).length); //函数参数的length 不包括rest参数\n\nlet f = function () {};\nconsole.log(f.name); //f 函数name属性\n\n//4 箭头函数\nvar d = () => 1; //相当于 var d = function () {retrun 5}\n\nvar sum = (sum1, sum2) => sum1 + sum2;\nconsole.log(sum(1, 2)); //3\n\nvar add = (sum1, sum2, sum3) => {\n    return console.log(sum1 + sum2 + sum3)\n}\nadd(3, 4, 5); //12 多行语句时,加大括号,用retrun返回\n\n[1, 2, 3].map(x => x * x);\n\nconst full = ({\n    first,\n    last\n}) => first + '' + last; //与变量结构结合使用\n\nconst numbers = (...nums) => console.log(nums);\nnumbers(1, 2, 3, 4, 5) //[1,2,3,4,5]与rest参数结合使用\n\n//箭头函数使用注意点 \n// function Timer() {\n//     this.s1 = 0;\n//     this.s2 = 0;\n//     setInterval(() => this.s1++, 1000);\n//     setInterval(function () {\n//         this.s2++\n//     }, 1000)\n// }\n// var timer = new Timer();\n// setInterval(() => console.log('s1:', timer.s1), 3100); //s1: 3 箭头函数的this总是指向定义时的作用域,箭头函数没有this,所有此处的s1=0\n// setInterval(() => console.log('s2:', timer.s2), 3100); //s2: 0 普通函数的this指向运行时的作用域(全局对象)\n\n//箭头函数this问题  头函数默认不会使用自己的this，而是会和外层的this保持一致，最外层的this就是window对象。\nfunction func8() {\n    console.log(this)\n}\nfunc8(); //window\n\nconst func9 = {\n    a: function () {\n        console.log(this)\n    }\n};\nfunc9.a(); //object对象\n\nconst func10 = {\n    b: () => console.log(this)\n};\nfunc10.b(); //window"]}